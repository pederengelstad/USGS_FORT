right_join(t, by=c('acc_tsn'='tsn'))
s
test = s0 %>%
left_join(t, by=c('acc_tsn'='tsn'))
test
# get required TSNs to efficiently process species names using ITIS
t0 = unique(bind_rows(get_tsn_(searchterm = sort(c('Lonicera maackii')),accepted = F, messages = T)))
t0 = t0[, c('nameUsage','scientificName','tsn')]
t0
# drop names that aren't in the original search list or are 'accepted'. this speeds up synonym search time.
t = t0[(t0$scientificName %in% sp_list | t0$nameUsage == 'accepted'),]
# drop hybrids
t = t[!t$scientificName %in% grep("X", t$scientificName, value = T, ignore.case = F),]
# drop one word terms...too general
t = t[str_count(t$scientificName, pattern = '\\w+') > 1,]
t
# find synonyms using function from the taxize library (make sure to have most recent build!)
s0 = suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0
# find synonyms using function from the taxize library (make sure to have most recent build!)
s0 = suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
# make sure subspecies aren't included in synonym lists. can lead to erroneous results when using base names later
# variations are dropped (i.e. var.; ssp.; cv. and so on) but not NAs (indicate a lack of synonyms)
s0 = s0[(str_count(s0$syn_name,'\\s') <= 2 | is.na(s0$syn_name)==T),]
s0
# get required TSNs to efficiently process species names using ITIS
t0 = unique(bind_rows(get_tsn_(searchterm = sort(c('Lonicera maackii','Bromus tectorum')),accepted = F, messages = T)))
t0 = t0[, c('nameUsage','scientificName','tsn')]
# drop names that aren't in the original search list or are 'accepted'. this speeds up synonym search time.
t = t0[(t0$scientificName %in% sp_list | t0$nameUsage == 'accepted'),]
# drop hybrids
t = t[!t$scientificName %in% grep("X", t$scientificName, value = T, ignore.case = F),]
# drop one word terms...too general
t = t[str_count(t$scientificName, pattern = '\\w+') > 1,]
# find synonyms using function from the taxize library (make sure to have most recent build!)
s0 = suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
# make sure subspecies aren't included in synonym lists. can lead to erroneous results when using base names later
# variations are dropped (i.e. var.; ssp.; cv. and so on) but not NAs (indicate a lack of synonyms)
s0 = s0[(str_count(s0$syn_name,'\\s') <= 2 | is.na(s0$syn_name)==T),]
s0
# add accepted terms to synonym data frame
s = s0 %>%
right_join(t, by=c('acc_tsn'='tsn'))
s
test = s0 %>%
left_join(t, by=c('acc_tsn'='tsn'))
test
# find synonyms using function from the taxize library (make sure to have most recent build!)
s0 = suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0
# find synonyms using function from the taxize library (make sure to have most recent build!)
s0 = suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0
# add accepted terms to synonym data frame
s = s0 %>%
right_join(t, by=c('acc_tsn'='tsn'))
s
# make sure subspecies aren't included in synonym lists. can lead to erroneous results when using base names later
# variations are dropped (i.e. var.; ssp.; cv. and so on) but not NAs (indicate a lack of synonyms)
s0 = s0[is.na(s$syn_name)==T,]
s0
# make sure subspecies aren't included in synonym lists. can lead to erroneous results when using base names later
# variations are dropped (i.e. var.; ssp.; cv. and so on) but not NAs (indicate a lack of synonyms)
ifelse(str_count(s$syn_name,'\\s') <= 2, 1,2)
# make sure subspecies aren't included in synonym lists. can lead to erroneous results when using base names later
# variations are dropped (i.e. var.; ssp.; cv. and so on) but not NAs (indicate a lack of synonyms)
ifelse(str_count(s$syn_name,'\\s') <= 2, s$syn_name = NA, s$syn_name)
# make sure subspecies aren't included in synonym lists. can lead to erroneous results when using base names later
# variations are dropped (i.e. var.; ssp.; cv. and so on) but not NAs (indicate a lack of synonyms)
ifelse(str_count(s$syn_name,'\\s') <= 2, s$syn_name == NA, s$syn_name)
# make sure subspecies aren't included in synonym lists. can lead to erroneous results when using base names later
# variations are dropped (i.e. var.; ssp.; cv. and so on) but not NAs (indicate a lack of synonyms)
ifelse(str_count(s$syn_name,'\\s') >= 2, s$syn_name == NA, s$syn_name)
# add accepted terms to synonym data frame
s = s0 %>%
right_join(t, by=c('acc_tsn'='tsn'))
s
# find synonyms using function from the taxize library (make sure to have most recent build!)
s0 = suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
# add accepted terms to synonym data frame
s = s0 %>%
right_join(t, by=c('acc_tsn'='tsn'))
s
# make sure subspecies aren't included in synonym lists. can lead to erroneous results when using base names later
# variations are dropped (i.e. var.; ssp.; cv. and so on) but not NAs (indicate a lack of synonyms)
s$syn_name = ifelse(str_count(s$syn_name,'\\s') >= 2, NA, s$syn_name)
s
# unify accepted names
s$ITISacceptedName = ifelse(is.na(s$scientificName),word(s$acc_name,1,2,' '), word(s$scientificName,1,2, ' '))
s
# get required TSNs to efficiently process species names using ITIS
t0 = unique(bind_rows(get_tsn_(searchterm = sort(c('Lonicera maackii','Bromus tectorum','Halogeton glomeratus')),accepted = F, messages = T)))
t0 = t0[, c('nameUsage','scientificName','tsn')]
# drop names that aren't in the original search list or are 'accepted'. this speeds up synonym search time.
t = t0[(t0$scientificName %in% sp_list | t0$nameUsage == 'accepted'),]
# drop hybrids
t = t[!t$scientificName %in% grep("X", t$scientificName, value = T, ignore.case = F),]
# drop one word terms...too general
t = t[str_count(t$scientificName, pattern = '\\w+') > 1,]
# find synonyms using function from the taxize library (make sure to have most recent build!)
s0 = suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0
# add accepted terms to synonym data frame
s = s0 %>%
right_join(t, by=c('acc_tsn'='tsn'))
s
# get required TSNs to efficiently process species names using ITIS
t0 = unique(bind_rows(get_tsn_(searchterm = sort(sp_list[1:5]),accepted = F, messages = T)))
t0 = t0[, c('nameUsage','scientificName','tsn')]
# drop names that aren't in the original search list or are 'accepted'. this speeds up synonym search time.
t = t0[(t0$scientificName %in% sp_list | t0$nameUsage == 'accepted'),]
# drop hybrids
t = t[!t$scientificName %in% grep("X", t$scientificName, value = T, ignore.case = F),]
# drop one word terms...too general
t = t[str_count(t$scientificName, pattern = '\\w+') > 1,]
t
# find synonyms using function from the taxize library (make sure to have most recent build!)
s0 = suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0
# add accepted terms to synonym data frame
s = s0 %>%
right_join(t, by=c('acc_tsn'='tsn'))
s
tsn.2 = s$acc_tsn[s$nameUsage=='not accepted']
tsn.2
length(tsn.2)
# get required TSNs to efficiently process species names using ITIS
t2 = unique(bind_rows(get_tsn_(searchterm = sort(tsn.2),accepted = F, messages = T)))
t2
# get required TSNs to efficiently process species names using ITIS
# t2 = unique(bind_rows(get_tsn_(searchterm = sort(tsn.2),accepted = F, messages = T)))
taxize::itis_getrecord(values = tsn.2)
# get required TSNs to efficiently process species names using ITIS
# t2 = unique(bind_rows(get_tsn_(searchterm = sort(tsn.2),accepted = F, messages = T)))
taxize::id2name(x = tsn.2, 'itis')
s0
s$acc_tsn[s$nameUsage=='not accepted']
s
s0
# add accepted terms to synonym data frame
s = s0 %>%
right_join(t, by=c('acc_tsn'='tsn'))
s
# add accepted terms to synonym data frame
s = s0 %>%
left_join(t, by=c('acc_tsn'='tsn'))
s
# get required TSNs to efficiently process species names using ITIS
t0 = unique(bind_rows(get_tsn_(searchterm = sort(sp_list[1:10]),accepted = F, messages = T)))
t0 = t0[, c('nameUsage','scientificName','tsn')]
t0
# drop names that aren't in the original search list or are 'accepted'. this speeds up synonym search time.
t = t0[(t0$scientificName %in% sp_list | t0$nameUsage == 'accepted'),]
t
# drop hybrids
t = t[!t$scientificName %in% grep("X", t$scientificName, value = T, ignore.case = F),]
t
# drop one word terms...too general
t = t[str_count(t$scientificName, pattern = '\\w+') > 1,]
t
# find synonyms using function from the taxize library (make sure to have most recent build!)
s0 = suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
s0
# add accepted terms to synonym data frame
s = s0 %>%
left_join(t, by=c('acc_tsn'='tsn'))
s
# make sure subspecies aren't included in synonym lists. can lead to erroneous results when using base names later
# variations are dropped (i.e. var.; ssp.; cv. and so on) but not NAs (indicate a lack of synonyms)
s$syn_name = ifelse(str_count(s$syn_name,'\\s') >= 2, NA, s$syn_name)
s
# unify accepted names
s$ITISacceptedName = ifelse(is.na(s$scientificName),word(s$acc_name,1,2,' '), word(s$scientificName,1,2, ' '))
s
# get required TSNs to efficiently process species names using ITIS
t0 = unique(bind_rows(get_tsn_(searchterm = sort(sp_list),accepted = F, messages = T)))
t0 = t0[, c('nameUsage','scientificName','tsn')]
t0
View(t0)
# drop names that aren't in the original search list or are 'accepted'. this speeds up synonym search time.
t = t0[(t0$scientificName %in% sp_list | t0$nameUsage == 'accepted'),]
# drop hybrids
t = t[!t$scientificName %in% grep("X", t$scientificName, value = T, ignore.case = F),]
# drop one word terms...too general
t = t[str_count(t$scientificName, pattern = '\\w+') > 1,]
View(t)
# find synonyms using function from the taxize library (make sure to have most recent build!)
s0 = suppressWarnings(suppressMessages(synonyms_df(synonyms(t$tsn, db = 'itis', ask=F))))
View(s0)
# make sure subspecies aren't included in synonym lists. can lead to erroneous results when using base names later
# variations are dropped (i.e. var.; ssp.; cv. and so on) but not NAs (indicate a lack of synonyms)
s0 = s0[(str_count(s0$syn_name,'\\s') <= 2 | is.na(s0$syn_name)==T),]
# add accepted terms to synonym data frame
s = s0 %>%
right_join(t, by=c('acc_tsn'='tsn'))
# add accepted terms to synonym data frame
s = s0 %>%
left_join(t, by=c('acc_tsn'='tsn'))
s
# unify accepted names
s$ITISacceptedName = ifelse(is.na(s$scientificName),word(s$acc_name,1,2,' '), word(s$scientificName,1,2, ' '))
s
# drop extra terms from synonyms b/c it's unlikely they will be found in searches
if(!is.null(s$syn_name)){
s$synonym_base = word(s$syn_name,1,2,' ')
} else {
s$synonym_base = NA
}
s
# simplify data frame, deduplicate, and double check that there aren't hybrids in the synonyms
sp_df = s %>%
select(ITISacceptedName, synonym_base) %>%
unique()
sp_df
sp_df = sp_df[!sp_df$synonym_base %in% grep("X", sp_df$synonym_base, value = T, ignore.case = F),]
sp_df <- sp_df[(sp_df$ITISacceptedName!=sp_df$synonym_base | is.na(sp_df$ITISacceptedName==sp_df$synonym_base)),]
sp_df <- sp_df[order(sp_df$ITISacceptedName),]
sp_df
# synthesize full, unique species name list including synonyms
species_search_list <- sort(unique(na.omit(c(sp_df$ITISacceptedName, sp_df$synonym_base))))
sp_list %in% species_search_list
sp_list[sp_list %in% species_search_list]
sp_list[!sp_list %in% species_search_list]
View(t0)
View(t)
View(s0)
View(s)
View(s0)
# add accepted terms to synonym data frame
s = s0 %>%
left_join(t, by=c('tsn'='acc_tsn'))
s %>%
right_join(t, by=c('acc_tsn'='tsn'))
s %>%
full_join(t, by=c('acc_tsn'='tsn'))
s.test = s %>%
full_join(t, by=c('acc_tsn'='tsn'))
View(s.test)
s.test = s0 %>%
full_join(t, by=c('acc_tsn'='tsn'))
View(s.test)
s = s0 %>%
full_join(t, by=c('acc_tsn'='tsn'))
# unify accepted names
s$ITISacceptedName = ifelse(is.na(s$scientificName),word(s$acc_name,1,2,' '), word(s$scientificName,1,2, ' '))
View(s)
s = s0 %>%
full_join(t, by=c('acc_tsn'='tsn')) %>%
filter(nameUsage != 'not accepted')
View(s)
# unify accepted names
s$ITISacceptedName = ifelse(is.na(s$scientificName),word(s$acc_name,1,2,' '), word(s$scientificName,1,2, ' '))
View(s)
# drop extra terms from synonyms b/c it's unlikely they will be found in searches
if(!is.null(s$syn_name)){
s$synonym_base = word(s$syn_name,1,2,' ')
} else {
s$synonym_base = NA
}
s
# simplify data frame, deduplicate, and double check that there aren't hybrids in the synonyms
sp_df = s %>%
select(ITISacceptedName, synonym_base) %>%
unique()
sp_df = sp_df[!sp_df$synonym_base %in% grep("X", sp_df$synonym_base, value = T, ignore.case = F),]
sp_df <- sp_df[(sp_df$ITISacceptedName!=sp_df$synonym_base | is.na(sp_df$ITISacceptedName==sp_df$synonym_base)),]
sp_df <- sp_df[order(sp_df$ITISacceptedName),]
sp_df
View(sp_df)
# synthesize full, unique species name list including synonyms
species_search_list <- sort(unique(na.omit(c(sp_df$ITISacceptedName, sp_df$synonym_base))))
sp_list[!sp_list %in% species_search_list]
View(sp_df)
# add accepted terms to synonym data frame
s = s0 %>%
full_join(t, by=c('acc_tsn'='tsn'))
# unify accepted names
s$ITISacceptedName = ifelse(is.na(s$scientificName),word(s$acc_name,1,2,' '), word(s$scientificName,1,2, ' '))
# drop extra terms from synonyms b/c it's unlikely they will be found in searches
if(!is.null(s$syn_name)){
s$synonym_base = word(s$syn_name,1,2,' ')
} else {
s$synonym_base = NA
}
# simplify data frame, deduplicate, and double check that there aren't hybrids in the synonyms
sp_df = s %>%
select(ITISacceptedName, synonym_base) %>%
unique()
sp_df = sp_df[!sp_df$synonym_base %in% grep("X", sp_df$synonym_base, value = T, ignore.case = F),]
sp_df <- sp_df[(sp_df$ITISacceptedName!=sp_df$synonym_base | is.na(sp_df$ITISacceptedName==sp_df$synonym_base)),]
sp_df <- sp_df[order(sp_df$ITISacceptedName),]
# synthesize full, unique species name list including synonyms
species_search_list <- sort(unique(na.omit(c(sp_df$ITISacceptedName, sp_df$synonym_base))))
sp_list[!sp_list %in% species_search_list]
View(sp_df)
plants.db = as.data.frame(gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1WkSt3EcOUkiRPRWeEZTKuQvkjhYFQre_Ox-I3FpPHbA/edit?usp=sharing"))
sp_df <- sp_df %>%
left_join(plants.db, by = c('ITISacceptedName' = 'Scientific_Name')) %>%
left_join(plants.db, by = c('synonym_base' = 'Scientific_Name')) %>%
rowwise() %>%
mutate(usda_codes = ifelse(all(is.na(c(Accepted_Symbol.x,Synonym_Symbol.x,Accepted_Symbol.y,Synonym_Symbol.y))),NA,
str_flatten(unique(na.omit(c(Accepted_Symbol.x,Synonym_Symbol.x,Accepted_Symbol.y,Synonym_Symbol.y))),
collapse = ',')))
View(sp_df)
sp_list[!sp_list %in% species_search_list]
sp_list[sp_list %in% species_search_list]
s
# add accepted terms to synonym data frame
s = s0 %>%
full_join(t, by=c('acc_tsn'='tsn'))
View(s)
View(sp_df)
# add accepted terms to synonym data frame
s = s0 %>%
full_join(t)
t
# add accepted terms to synonym data frame
s = s0 %>%
full_join(t[t$nameUsage=='not accepted'], by=c('syn_tsn'='tsn'))
# add accepted terms to synonym data frame
s = s0 %>%
full_join(t[t$nameUsage=='not accepted',], by=c('syn_tsn'='tsn'))
# add accepted terms to synonym data frame
s = s0 %>%
full_join(t[t$nameUsage=='not accepted',], by=c('syn_tsn'='tsn')) %>%
full_join(t[t$nameUsage!='not accepted',], by=c('acc_tsn'='tsn'))
# add accepted terms to synonym data frame
s = s0 %>%
full_join(t[t$nameUsage=='not accepted',], by=c('syn_tsn'='tsn')) %>%
full_join(t[t$nameUsage!='not accepted',], by=c('acc_tsn'='tsn', 'nameUsage'))
# add accepted terms to synonym data frame
s = s0 %>%
full_join(t[t$nameUsage=='not accepted',], by=c('syn_tsn'='tsn')) %>%
full_join(t[t$nameUsage!='not accepted',], by=c('acc_tsn'='tsn'))
# add accepted terms to synonym data frame
s = s0 %>%
full_join(t[t$nameUsage=='not accepted',], by=c('syn_tsn'='tsn')) %>%
full_join(t[t$nameUsage!='not accepted',], by=c('acc_tsn'='tsn'))
s0 %>%
full_join(t[t$nameUsage=='not accepted',], by=c('syn_tsn'='tsn')) %>%
full_join(t[t$nameUsage!='not accepted',], by=c('acc_tsn'='tsn')) %>%
mutate(scientificName = coalesce(scientificName.x, scientificName.y))
s = s0 %>%
full_join(t[t$nameUsage=='not accepted',], by=c('syn_tsn'='tsn')) %>%
full_join(t[t$nameUsage!='not accepted',], by=c('acc_tsn'='tsn')) %>%
mutate(scientificName = coalesce(scientificName.x, scientificName.y))
# unify accepted names
s$ITISacceptedName = ifelse(is.na(s$scientificName),word(s$acc_name,1,2,' '), word(s$scientificName,1,2, ' '))
# drop extra terms from synonyms b/c it's unlikely they will be found in searches
if(!is.null(s$syn_name)){
s$synonym_base = word(s$syn_name,1,2,' ')
} else {
s$synonym_base = NA
}
# simplify data frame, deduplicate, and double check that there aren't hybrids in the synonyms
sp_df = s %>%
select(ITISacceptedName, synonym_base) %>%
unique()
sp_df
sp_df = sp_df[!sp_df$synonym_base %in% grep("X", sp_df$synonym_base, value = T, ignore.case = F),]
sp_df <- sp_df[(sp_df$ITISacceptedName!=sp_df$synonym_base | is.na(sp_df$ITISacceptedName==sp_df$synonym_base)),]
sp_df <- sp_df[order(sp_df$ITISacceptedName),]
sp_df
# synthesize full, unique species name list including synonyms
species_search_list <- sort(unique(na.omit(c(sp_df$ITISacceptedName, sp_df$synonym_base))))
sp_list[sp_list %in% species_search_list]
sp_list[!sp_list %in% species_search_list]
s = s0 %>%
full_join(t[t$nameUsage=='not accepted',], by=c('syn_tsn'='tsn')) %>%
full_join(t[t$nameUsage!='not accepted',], by=c('acc_tsn'='tsn')) %>%
mutate(scientificName = coalesce(scientificName.x, scientificName.y)) %>%
mutate(nameUsage = coalesce(nameUsage.x, nameUsage.y))
if(s$nameUsage=='accepted'){
s$ITISacceptedName = s$acc_name
}
for(i in 1:nrow(s)){
if(s$nameUsage[i]=='accepted'){
s$ITISacceptedName[i] = s$acc_name[i]
}
}
for(i in 1:nrow(s)){
if(s$nameUsage[i]=='accepted'){
s$ITISacceptedName[i] <- s$acc_name[i]
}
}
s$nameUsage[i]
for(i in 1:nrow(s)){
if((s$nameUsage[i]=='accepted')==T){
s$ITISacceptedName[i] <- s$acc_name[i]
}
}
for(i in 1:nrow(s)){
if((s$nameUsage[i]=='accepted' & !is.na(s$nameUsage[i]))==T){
s$ITISacceptedName[i] <- s$acc_name[i]
}
}
s$acc_name[i]
!is.na(s$nameUsage[i])
s = s0 %>%
full_join(t[t$nameUsage=='not accepted',], by=c('syn_tsn'='tsn')) %>%
full_join(t[t$nameUsage!='not accepted',], by=c('acc_tsn'='tsn')) %>%
mutate(scientificName = coalesce(scientificName.x, scientificName.y)) %>%
mutate(nameUsage = coalesce(nameUsage.x, nameUsage.y)) %>%
mutate(ITISacceptedName = itis_acceptname(searchtsn = acc_tsn))
s = s0 %>%
full_join(t[t$nameUsage=='not accepted',], by=c('syn_tsn'='tsn')) %>%
full_join(t[t$nameUsage!='accepted',], by=c('acc_tsn'='tsn')) %>%
mutate(scientificName = coalesce(scientificName.x, scientificName.y)) %>%
mutate(nameUsage = coalesce(nameUsage.x, nameUsage.y))
# unify accepted names
s$ITISacceptedName = ifelse(!is.na(s$acc_name),word(s$acc_name,1,2,' '), word(s$scientificName,1,2, ' '))
View(t)
# add accepted terms to synonym data frame
s = s0 %>%
full_join(t[t$nameUsage=='accepted',], by=c('syn_tsn'='tsn')) %>%
full_join(t[t$nameUsage!='not accepted',], by=c('acc_tsn'='tsn')) %>%
mutate(scientificName = coalesce(scientificName.x, scientificName.y)) %>%
mutate(nameUsage = coalesce(nameUsage.x, nameUsage.y)) %>%
mutate(ITISacceptedName = itis_acceptname(searchtsn = acc_tsn))
# add accepted terms to synonym data frame
s = s0 %>%
full_join(t[t$nameUsage=='accepted',], by=c('syn_tsn'='tsn')) %>%
full_join(t[t$nameUsage!='not accepted',], by=c('acc_tsn'='tsn')) %>%
mutate(scientificName = coalesce(scientificName.x, scientificName.y)) %>%
mutate(nameUsage = coalesce(nameUsage.x, nameUsage.y))
# unify accepted names
s$ITISacceptedName = ifelse(!is.na(s$acc_name),word(s$acc_name,1,2,' '), word(s$scientificName,1,2, ' '))
# drop extra terms from synonyms b/c it's unlikely they will be found in searches
if(!is.null(s$syn_name)){
s$synonym_base = word(s$syn_name,1,2,' ')
} else {
s$synonym_base = NA
}
# simplify data frame, deduplicate, and double check that there aren't hybrids in the synonyms
sp_df = s %>%
select(ITISacceptedName, synonym_base) %>%
unique()
sp_df = sp_df[!sp_df$synonym_base %in% grep("X", sp_df$synonym_base, value = T, ignore.case = F),]
sp_df <- sp_df[(sp_df$ITISacceptedName!=sp_df$synonym_base | is.na(sp_df$ITISacceptedName==sp_df$synonym_base)),]
sp_df <- sp_df[order(sp_df$ITISacceptedName),]
# synthesize full, unique species name list including synonyms
species_search_list <- sort(unique(na.omit(c(sp_df$ITISacceptedName, sp_df$synonym_base))))
sp_list[!sp_list %in% species_search_list]
print("Finding USDA species codes")
plants.db = as.data.frame(gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1WkSt3EcOUkiRPRWeEZTKuQvkjhYFQre_Ox-I3FpPHbA/edit?usp=sharing"))
sp_df <- sp_df %>%
left_join(plants.db, by = c('ITISacceptedName' = 'Scientific_Name')) %>%
left_join(plants.db, by = c('synonym_base' = 'Scientific_Name')) %>%
rowwise() %>%
mutate(usda_codes = ifelse(all(is.na(c(Accepted_Symbol.x,Synonym_Symbol.x,Accepted_Symbol.y,Synonym_Symbol.y))),NA,
str_flatten(unique(na.omit(c(Accepted_Symbol.x,Synonym_Symbol.x,Accepted_Symbol.y,Synonym_Symbol.y))),
collapse = ',')))
View(sp_df)
View(plants.db)
sp_df2 <- sp_df
sp_list = suppressWarnings(readLines('E:/Users/engelstad/USGS/OccurrenceData/PriorityList2019/prioritylist.txt'))
source('./SpeciesProcessing.R')
# sp_list = c('Cenchrus setaceus')
species_processing(sort(sp_list), USDA = T)
sp_df = sp_df2
# sp_list = c('Cenchrus setaceus')
species_processing(sort(sp_list), USDA = T)
sp_df==sp_df2
View(sp_df)
View(sp_df_2)
View(sp_df2)
sp_list[!(sp_list %in% species_search_list)]
species_search_list <- sort(unique(na.omit(c(sp_df$ITISacceptedName, sp_df$synonym_base))))
sp_list[!(sp_list %in% species_search_list)]
species_search_list
sp_list[!(sp_list %in% species_search_list)]
################################################################################
#3. Pull data from API Sources
# source('./API_Sources.R')
source('./API_Sources_NoInat.R')
df_list <- list()
api_sources <- c('bison', 'gbif', 'eddmaps')
startdate <- '1980-01-01'
enddate <- as.Date(Sys.Date())
api_data(species_list = species_search_list
, sources = api_sources
, limit = 999999
, startDate = startdate
, endDate = enddate
, US_only = T
)
# As needed, review these occ records to see if the number of records is reasonable.
df_list$spocc %>%
# filter(DataSet=='bison') %>%
select(searched_term) %>%
group_by(searched_term) %>%
summarize(count = n())
source('./DataFromFiles.R')
getwd()
aim_file = 'E:/Users/engelstad/USGS/data/BLM/AIM.allsp.pnts.May2018.csv'
lmf_file = 'E:/Users/engelstad/USGS/data/BLM/LMF.allsp.csv'
nisims_nps_file = 'E:/Users/engelstad/USGS/data/NISIMS/NISIMS_NPS_L48.csv'
nisims_blm_file = 'E:/Users/engelstad/USGS/data/NISIMS/NISIMS_BLM_L48.csv'
AddDataFromFiles(aim_file_loc = aim_file,
lmf_file_loc = lmf_file,
nisims_nps_file_loc = nisims_nps_file,
nisims_blm_file_loc = nisims_blm_file)
########################################################################################################
#4. Perform QA/QC on occurrence records
source('./DataCleaning.R')
Data_QAQC(df_list)
occ_all %>%
select(DataSet) %>%
group_by(DataSet) %>%
summarize(count = n())
write.csv(occ_all, 'E:/Users/engelstad/USGS/OccurrenceData/PriorityList2019/priority_list_20190514.csv')
save.image("E:/Users/engelstad/USGS/OccurrenceData/PriorityList2019/data.RData")
