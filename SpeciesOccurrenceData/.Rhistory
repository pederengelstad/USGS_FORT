load("~/testing_SAHM/multCoreTrueFalse/brewersSparrow/rf_1/modelWorkspace")
out$input$multCore
rm(out)
load("~/testing_SAHM/multCoreTrueFalse/vespersSparrow/rf_1/modelWorkspace")
out$input$multCore
rm(out)
load("~/testing_SAHM/multCoreTrueFalse/vespersSparrow/glm_1/modelWorkspace")
out$input$multCore
rm(out)
load("~/testing_SAHM/multCoreTrueFalse/brewersSparrow_justMaurerObs/rf_asage_1/modelWorkspace")
out$input$multCore
rm(out)
load("~/testing_SAHM/reversemultCoreFalseTrue/glm_1/modelWorkspace")
out$input$multCore
rm(out)
rm(out)
load("~/testing_SAHM/reversemultCoreFalseTrue/brt_1/modelWorkspace")
out$input$multCore
rm(out)
rm(out)
load("~/testing_SAHM/FalseToTrue/brewersSparrow_justMaurerObs/brt_asage_1/modelWorkspace")
out$input$multCore
rm(out)
source('~/.active-rstudio-document', echo=TRUE)
Args
argSplit
argSplit[1][1]
for(arg in Args){
if(argSplit[1][1]=="interactive") test = argSplit[1][2]
}
test
if(argSplit[1][1]=="interactive") test = argSplit[1][1]
test
if(argSplit[1][1]=="interactive") test <- argSplit[1][1]
for(arg in Args){
if(argSplit[1][1]=="interactive") test <- argSplit[1][1]
}
for(arg in Args){
argSplit <- strsplit(arg, "=")
argSplit[[1]][1]
argSplit[[1]][2]
if(argSplit[1][1]=="interactive") test <- argSplit[1][1]
}
for(arg in Args){
argSplit <- strsplit(arg, "=")
print(argSplit[[1]][1])
print(argSplit[[1]][2])
if(argSplit[1][1]=="interactive") test <- argSplit[1][1]
}
argSplit
for(arg in Args){
argSplit <- strsplit(arg, "=")
print(argSplit[[1]][1])
print(argSplit[[1]][2])
if(argSplit[1][1]=="--interactive") test <- argSplit[1][1]
}
test
for (i in 1:length(Args)){
if(Args[i]=="-f") ScriptPath<-Args[i+1]
argSplit <- strsplit(Args[i], "=")
if(argSplit[[1]][1]=="--file") ScriptPath <- argSplit[[1]][2]
}
Args <- commandArgs(trailingOnly=FALSE)
for (i in 1:length(Args)){
if(Args[i]=="-f") ScriptPath<-Args[i+1]
argSplit <- strsplit(Args[i], "=")
if(argSplit[[1]][1]=="--file") ScriptPath <- argSplit[[1]][2]
}
Args
Args <- commandArgs(trailingOnly=T)
Args
Args <- commandArgs(trailingOnly=F)
Args
for(arg in Args){
argSplit <- strsplit(arg, "--")
print(argSplit[[1]][1])
print(argSplit[[1]][2])
if(argSplit[1][1]=="--interactive") test <- argSplit[1][1]
}
Args <- commandArgs(trailingOnly=FALSE)
for (i in 1:length(Args)){
if(Args[i]=="-f") ScriptPath<-Args[i+1]
argSplit <- strsplit(Args[i], "=")
if(argSplit[[1]][1]=="--file") ScriptPath <- argSplit[[1]][2]
}
for(arg in Args){
print(arg)
argSplit <- strsplit(arg, "--")
print(argSplit)
print(argSplit[[1]][1])
print(argSplit[[1]][2])
if(argSplit[1][1]=="--interactive") test <- argSplit[1][1]
}
for(arg in Args){
print(arg)
argSplit <- strsplit(arg, "=")
print(argSplit)
print(argSplit[[1]][1])
print(argSplit[[1]][2])
if(argSplit[1][1]=="--interactive") test <- argSplit[1][1]
}
# Origin Date: 3/7/2018
# Last Edited: 7/24/2018
# Purpose: Download and combine species occurrence data, perform QA/QC, and export to CSV
# Script Purpose: 1. Determine all species considered invasive from USDA.
#                 2. Pull occurrence records from API and hard-coded data sources.
#                 3. Generate background point data based on lat-longs from occurrence records
#
# Authors: Peder Engelstad (adapted from work by Helen Sofaer)
# Contact: pengel@colostate.edu
list.of.packages <- c("devtools","gsheet","jsonlite","rgdal","rgeos","ritis","scrubr",'spocc',"stringr","taxize","tidyverse")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# !!! if you don't already have the latest version of spocc and/or taxize from github, uncomment the line below and run !!!
# devtools::install_github("ropensci/spocc")
# devtools::install_github("ropensci/taxize")
library(tidyverse)
setwd('~/GitHub/USGS_FORT/SpeciesOccurrenceData/')
source('./SpeciesProcessing.R')
# sp_list = suppressWarnings(readLines('C:/Users/peder/Documents/USGS/Scripts/ShinyApps/FWS_Viz/fws_specieslist.txt'))
sp_list = c('Ceratocephala testiculata','Chondrilla juncea', 'Cardaria draba', 'Ventenata dubia', 'Centaurea solstitialis')
species_processing(sort(sp_list), USDA=T)
sort(species_search_list)
sp_df
################################################################################
#3. Pull data from API Sources
source('./API_Sources.R')
api_sources <- c('gbif','bison','eddmaps')
startdate <- '1980-01-01'
enddate <- as.Date(Sys.Date())
df_list <- list()
bison_options = list(params=c('basisOfRecord: specimen, observation'))
api_data(species_list = species_search_list
, sources = api_sources
, limit = 99999
, bisonopts = bison_options
, startDate = startdate
, endDate = enddate
, US_only = F
)
########################################################################################################
#4. Perform QA/QC on occurrence records
source('./DataCleaning.R')
Data_QAQC(df_list)
occ_all %>%
select(ITIS_AcceptedName) %>%
group_by(ITIS_AcceptedName) %>%
summarize(count = n())
write.csv(occ_all, '~/SpOcc_Request_20180827_APIonly.csv')
library(rgdal)
NISIMS_NPS = readOGR('~/USGS/Data/vector/NISIMS_NPS/fountaingrass_nisims_nps.shp', stringsAsFactors = F, GDAL1_integer64_policy = T)
NPS_PARSE <- NISIMS_NPS %>%
mutate(DataSet = "NISIMS_NPS"
,albersLatitude = as.numeric(str_extract(CNTR_PT_CN, pattern = "(?<=X: ).*(?= Y)"))
,albersLongitude = as.numeric(str_extract(CNTR_PT_CN, pattern = "(?<= Y: ).*"))
,source_sp_name = SCNTFC_CD
,ObsDate = as.Date(BEGIN_DT)
,ObsYear = as.integer(format(as.Date(BEGIN_DT), "%Y")))
as.data.frame(NISIMS_NPS)
NISIMS_NPS_df = as.data.frame(NISIMS_NPS)
NPS_PARSE <- NISIMS_NPS_df %>%
mutate(DataSet = "NISIMS_NPS"
,albersLatitude = as.numeric(str_extract(CNTR_PT_CN, pattern = "(?<=X: ).*(?= Y)"))
,albersLongitude = as.numeric(str_extract(CNTR_PT_CN, pattern = "(?<= Y: ).*"))
,source_sp_name = SCNTFC_CD
,ObsDate = as.Date(BEGIN_DT)
,ObsYear = as.integer(format(as.Date(BEGIN_DT), "%Y")))
NPS_PARSE$albersLatitude
NPS_PARSE$albersLongitude
write.csv('~/USGS/Data/Tabular/NISIMS_NPS_albersCoords.csv')
write.csv(NPS_PARSE, '~/USGS/Data/Tabular/NISIMS_NPS_albersCoords.csv')
nrow(NISIMS_NPS@data)
NISIMS_NPS = readOGR('~/USGS/Data/vector/NISIMS_NPS/NISIMS_NPS.shp', stringsAsFactors = F, GDAL1_integer64_policy = T)
NISIMS_NPS_df = as.data.frame(NISIMS_NPS)
NPS_PARSE <- NISIMS_NPS_df %>%
mutate(DataSet = "NISIMS_NPS"
,albersLatitude = as.numeric(str_extract(CNTR_PT_CN, pattern = "(?<=X: ).*(?= Y)"))
,albersLongitude = as.numeric(str_extract(CNTR_PT_CN, pattern = "(?<= Y: ).*"))
,source_sp_name = SCNTFC_CD
,ObsDate = as.Date(BEGIN_DT)
,ObsYear = as.integer(format(as.Date(BEGIN_DT), "%Y")))
NPS_PARSE$albersLatitude
NPS_PARSE$albersLongitude
write.csv(NPS_PARSE, '~/USGS/Data/Tabular/NISIMS_NPS_albersCoords_Full.csv')
source('./DataFromFiles.R')
aim_file = '~/USGS/Data/BLM/AIM.allsp.pnts.May2018.csv'
lmf_file = '~/USGS/Data/BLM/LMF.allsp.csv'
nisims_nps_file = '~/USGS/Data/NISIMS/NISIMS_NPS_L48.csv'
nisims_blm_file = '~/USGS/Data/NISIMS/NISIMS_BLM_L48.csv'
AddDataFromFiles(aim_file_loc = aim_file,
lmf_file_loc = lmf_file,
nisims_nps_file_loc = nisims_nps_file,
nisims_blm_file_loc = nisims_blm_file)
Data_QAQC(df_list)
occ_all %>%
select(ITIS_AcceptedName) %>%
group_by(ITIS_AcceptedName) %>%
summarize(count = n())
write.csv(occ_all, '~/SpOcc_Request_20180827.csv')
########################################################################################################
# 5. Quickly view species of interest on a map for QA purposes
library(leaflet)
library(htmltools)
library(viridis)
csv = read.csv("~/SpOcc_Request_20180827.csv", header=T, stringsAsFactors = F)
n = length(unique(occ_all$ITIS_AcceptedName))
pal = colorFactor(rainbow(n), occ_all$ITIS_AcceptedName)
# csv = csv[csv$ITIS_AcceptedName=='Oplismenus undulatifolius',]
spatial_occ <- SpatialPointsDataFrame(data = occ_all, coords = occ_all[c('latitude','longitude')],proj4string = CRS("+init=epsg:4326"))
m <- leaflet(data=spatial_occ) %>%
addTiles("https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png") %>%  # Add defau
addCircleMarkers(lng=~longitude, lat=~latitude
, fillColor = ~pal(ITIS_AcceptedName)
, stroke=F, fillOpacity=0.8, radius = 2.8, popup = ~htmlEscape(ObsDate)) %>%
addLegend("topright", pal = pal, values = ~ITIS_AcceptedName, labels = "Species ", title = "Invasive Species")
m  # Print the map
occ_all %>%
select(DataSet) %>%
group_by(DataSet) %>%
summarize(count = n())
load('~/testing_SAHM/FalseToTrue/vespersSparrow/mars_1/modelWorkspace')
Header<-cbind(c("","Original Field Data","Field Data Template","PARC Output Folder","PARC Template","Covariate Selection Name",""),
c(basename(out$input$output.dir),
out$dat$input$OrigFieldData,out$dat$input$FieldDataTemp,out$dat$input$ParcOutputFolder,
out$dat$input$ParcTemplate,ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName),""))
Header
#from make.auc.r
Header<-cbind(c("","Original Field Data","Field Data Template","PARC Output Folder","PARC Template","Covariate Selection Name",""),
c(basename(out$input$output.dir),
out$dat$input$OrigFieldData,out$dat$input$FieldDataTemp,out$dat$input$ParcOutputFolder,
basename(out$dat$input$ParcTemplate),ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName),""))
#from make.auc.r
cbind(c("","Original Field Data","Field Data Template","PARC Output Folder","PARC Template","Covariate Selection Name",""),
c(basename(out$input$output.dir),
out$dat$input$OrigFieldData,out$dat$input$FieldDataTemp,out$dat$input$ParcOutputFolder,
basename(out$dat$input$ParcTemplate),ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName),""))
#from place.save.r
cbind(c("","Original Field Data","Field Data Template","PARC Output Folder","PARC Template","Covariate Selection Name",""),
c(basename(out$input$output.dir),
out$dat$input$OrigFieldData,out$dat$input$FieldDataTemp,out$dat$input$ParcOutputFolder,
out$dat$input$ParcTemplate,ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName),""))
#more detailed from make.auc.r because it IS different
############ getting statistics along with appropriate names into a data frame for creating the appended output
parent<-dirname(out$input$output.dir)
parent
if(out$input$model.family%in%c("binomial","bernoulli")){
csv.stats<-lapply(Stats,function(lst){
return(c("","",lst$correlation,lst$pct.dev.exp,lst$Pcc,lst$auc.fit,lst$Tss))})
stat.names<-c("Correlation Coefficient","Percent Deviance Explained","Percent Correctly Classified","AUC","True Skill Stat")
} else{
csv.stats<-lapply(Stats,function(lst){
return(c("","",lst$correlation,lst$pct.dev.exp,lst$prediction.error/100))})
stat.names<-c("Correlation Coefficient","Percent Deviance Explained","Prediction Error")
}
#from place.save.r
cbind(c("","Original Field Data","Field Data Template","PARC Output Folder","PARC Template","Covariate Selection Name",""),
c(out$dat$input$OrigFieldData,out$dat$input$FieldDataTemp,out$dat$input$ParcOutputFolder,
out$dat$input$ParcTemplate,ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName),""))
#from place.save.r
cbind(c("","Original Field Data","Field Data Template","PARC Output Folder","PARC Template","Covariate Selection Name"),
c(basename(out$input$output.dir),
out$dat$input$OrigFieldData,out$dat$input$FieldDataTemp,out$dat$input$ParcOutputFolder,
out$dat$input$ParcTemplate,ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName),""))
#from make.auc.r
cbind(c("","Original Field Data","Field Data Template","PARC Output Folder","PARC Template","Covariate Selection Name",""),
c(out$dat$input$OrigFieldData,out$dat$input$FieldDataTemp,out$dat$input$ParcOutputFolder,
basename(out$dat$input$ParcTemplate),ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName),""))
ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName)
out$dat$input$CovSelectName
load('~/testing_SAHM/glm_target_3/glm_target_3/modelWorkspace')
#from place.save.r
cbind(c("","Original Field Data","Field Data Template","PARC Output Folder","PARC Template","Covariate Selection Name",""),
c(basename(out$input$output.dir),
out$dat$input$OrigFieldData,out$dat$input$FieldDataTemp,out$dat$input$ParcOutputFolder,
out$dat$input$ParcTemplate,ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName),""))
#from make.auc.r
cbind(c("","Original Field Data","Field Data Template","PARC Output Folder","PARC Template","Covariate Selection Name",""),
c(out$dat$input$OrigFieldData,out$dat$input$FieldDataTemp,out$dat$input$ParcOutputFolder,
basename(out$dat$input$ParcTemplate),ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName),""))
#from place.save.r
cbind(c("","Original Field Data","Field Data Template","PARC Output Folder","PARC Template","Covariate Selection Name",""),
c(basename(out$input$output.dir),
out$dat$input$OrigFieldData,out$dat$input$FieldDataTemp,out$dat$input$ParcOutputFolder,
out$dat$input$ParcTemplate,ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName),""))
#from make.auc.r
cbind(c("","Original Field Data","Field Data Template","PARC Output Folder","PARC Template","Covariate Selection Name",""),
c(out$dat$input$OrigFieldData,out$dat$input$FieldDataTemp,out$dat$input$ParcOutputFolder,
basename(out$dat$input$ParcTemplate),ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName),""))
#from make.auc.r
cbind(c("","Original Field Data","Field Data Template","PARC Output Folder","PARC Template","Covariate Selection Name",""),
c(basename(out$input$output.dir),
out$dat$input$OrigFieldData,out$dat$input$FieldDataTemp,out$dat$input$ParcOutputFolder,
basename(out$dat$input$ParcTemplate),ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName),""))
#from place.save.r
cbind(c("","Original Field Data","Field Data Template","PARC Output Folder","PARC Template","Covariate Selection Name",""),
c(basename(out$input$output.dir),
out$dat$input$OrigFieldData,out$dat$input$FieldDataTemp,out$dat$input$ParcOutputFolder,
out$dat$input$ParcTemplate,ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName),""))
#from make.auc.r
cbind(c("","Original Field Data","Field Data Template","PARC Output Folder","PARC Template","Covariate Selection Name",""),
c(basename(out$input$output.dir),
out$dat$input$OrigFieldData,out$dat$input$FieldDataTemp,out$dat$input$ParcOutputFolder,
basename(out$dat$input$ParcTemplate),ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName),""))
out$dat$bnameExpanded=file.path(dirname(out$dat$bname),"ExpandedOutput")
out$dat$bnameExpanded
dir.create(out$dat$bnameExpanded)
load('~/testing_SAHM/FalseToTrue/vespersSparrow/mars_1/modelWorkspace')
out$dat$bnameExpanded=file.path(dirname(out$dat$bname),"ExpandedOutput")
dir.create(out$dat$bnameExpanded)
ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName)
load('~/testing_SAHM/glm_target_3/glm_target_3/modelWorkspace')
ifelse(length(out$dat$input$CovSelectName)==0,"NONE",out$dat$input$CovSelectName)
out$input
load('~/testing_SAHM/glm_target_3/glm_target_3/modelWorkspace')
parent<-dirname(out$input$output.dir)
compile.out<-file.path(parent,
paste(ifelse(missing(Final.Model),"AcrossModel","FinalEvaluation"),
switch(out$dat$split.type,"crossValidation"="CrossVal","test"="TestTrain","none"="NoSplit"),
switch(out$input$model.family,"binomial"="Binom","bernoulli"="Binom","poisson"="Count"),if(out$input$PsdoAbs)"PsdoAbs",
".csv",
sep="")
)
compile.out<-file.path(parent,
paste("FinalEvaluation",
switch(out$dat$split.type,"crossValidation"="CrossVal","test"="TestTrain","none"="NoSplit"),
switch(out$input$model.family,"binomial"="Binom","bernoulli"="Binom","poisson"="Count"),if(out$input$PsdoAbs)"PsdoAbs",
".csv",
sep="")
)
compile.out
