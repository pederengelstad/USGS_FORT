install.packages("PRROC")
pal = colorNumeric(values(dat2))
dat = raster::raster('~/testing_SAHM/20180731/brewersSparrow/brt_1/brt_prob_map.tif')
leaflet::projectRasterForLeaflet(dat,method = "ngb")
dat2 = raster::calc(dat, fun = function(x) ifelse(x>=0.5, 1, 0))
?values()
dat = raster::raster('~/testing_SAHM/20180731/brewersSparrow/brt_1/brt_prob_map.tif')
leaflet::projectRasterForLeaflet(dat,method = "ngb")
dat2 = raster::calc(dat, fun = function(x) ifelse(x>=0.5, 1, 0))
pal = colorNumeric("OrRd", dat2$layer@data@values)
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(leaflet)
pal = colorNumeric("OrRd", dat2$layer@data@values)
min(dat$brt_prob_map@data@values)
dat = raster('brt_prob_map.tif')
library(raster)
dat = raster('brt_prob_map.tif')
dat = raster('./brt_prob_map.tif')
dat = raster('./brt_prob_map.tif')
dat = raster('./brt_prob_map.tif')
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(leaflet)
library(raster)
library(rgdal)
dat = raster('./brt_prob_map.tif')
dat = raster('brt_prob_map.tif')
dat = raster('~/USGS/FlexDashboards/raster_thresholding/brt_prob_map.tif')
min(dat$brt_prob_map@data@values)
dat$brt_prob_map@data@values
dat$brt_prob_map@data@min
dat3 = raster::calc((dat, fun = function(x) ifelse(x > dat$brt_prob_map@data@min, 1, 0)))
dat3 = raster::calc(dat, fun = function(x) ifelse(x >= dat$brt_prob_map@data@min, 1, 0))
plot(dat3)
dat = raster('brt_prob_map.tif')
bigdat = raster('./USGS/FlexDashboards/raster_thresholding/conus_forest_biomass_mg_per_ha.img')
library(shiny)
library(leaflet)
runApp('USGS/Scripts/ShinyApps/BigRasterViz')
runApp('USGS/Scripts/ShinyApps/BigRasterViz')
runApp('USGS/Scripts/ShinyApps/BigRasterViz')
library(rsconnect)
options(rsconnect.max.bundle.files = 50000)
runApp('USGS/Scripts/ShinyApps/BigRasterViz')
runApp('USGS/Scripts/ShinyApps/BigRasterViz')
runApp('USGS/Scripts/ShinyApps/BigRasterViz')
runApp('USGS/Scripts/ShinyApps/BigRasterViz')
runApp('USGS/Scripts/ShinyApps/BigRasterViz')
runApp('USGS/Scripts/ShinyApps/BigRasterViz')
runApp('USGS/Scripts/ShinyApps/BigRasterViz')
runApp('USGS/Scripts/ShinyApps/BigRasterViz')
shiny::runApp('USGS/Scripts/ShinyApps/BigRasterViz')
list.of.packages <- c("devtools","gsheet","jsonlite","rgdal","rgeos","ritis","scrubr",'spocc',"stringr","taxize","tidyverse")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
setwd('~/GitHub/USGS_FORT/SpeciesOccurrenceData/')
source('./SpeciesProcessing.R')
# sp_list = suppressWarnings(readLines('C:/Users/peder/Documents/USGS/Scripts/ShinyApps/FWS_Viz/fws_specieslist.txt'))
sp_list = c('Tamarix', 'Elaeagnus angustifolia', 'Ulmus pumila')
species_processing(sort(sp_list), USDA=T)
sp_df
sort(species_search_list)
################################################################################
#3. Pull data from API Sources
source('./API_Sources.R')
api_sources <- c('gbif','bison','eddmaps')
startdate <- '1980-01-01'
enddate <- as.Date(Sys.Date())
df_list <- list()
bison_options = list(params=c('basisOfRecord: specimen, observation'))
api_data(species_list = species_search_list
, sources = api_sources
, limit = 99999
, bisonopts = bison_options
, startDate = startdate
, endDate = enddate
, US_only = F
)
source('./DataFromFiles.R')
aim_file = '~/USGS/Data/BLM/AIM.allsp.pnts.May2018.csv'
lmf_file = '~/USGS/Data/BLM/LMF.allsp.csv'
nisims_nps_file = '~/USGS/Data/NISIMS/NISIMS_Presences_05312018.csv'
nisims_blm_file = '~/USGS/Data/NISIMS/WeedInfestationData_Large.csv'
AddDataFromFiles(aim_file_loc = aim_file,
lmf_file_loc = lmf_file,
nisims_nps_file_loc = nisims_nps_file,
nisims_blm_file_loc = nisims_blm_file)
########################################################################################################
#4. Perform QA/QC on occurrence records
source('./DataCleaning.R')
Data_QAQC(df_list)
occ_all %>%
select(ITIS_AcceptedName) %>%
group_by(ITIS_AcceptedName) %>%
summarize(count = n())
write.csv(occ_all, 'C:/Users/peder/Documents/USGS/ThreeSpRequest_20180808.csv')
########################################################################################################
# 5. Quickly view species of interest on a map for QA purposes
library(leaflet)
library(viridis)
csv = read.csv("~/USGS/ThreeSpRequest_20180808.csv", header=T, stringsAsFactors = F)
n = length(unique(csv$ITIS_AcceptedName))
pal = colorFactor(rainbow(n), csv$ITIS_AcceptedName)
# csv = csv[csv$ITIS_AcceptedName=='Oplismenus undulatifolius',]
spatial_occ <- SpatialPointsDataFrame(data = csv, coords = csv[c('latitude','longitude')],proj4string = CRS("+init=epsg:4326"))
m <- leaflet(data=spatial_occ) %>%
addTiles("https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png") %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(lng=~longitude, lat=~latitude, fillColor= ~pal(ITIS_AcceptedName), stroke=F, fillOpacity=0.8, radius = 2.8) %>%
addLegend("topright", pal = pal, values = ~ITIS_AcceptedName, labels = "Species ", title = "Invasive Species")
m  # Print the map
