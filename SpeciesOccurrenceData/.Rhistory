, bisonopts = bisonopts
)
bisonopts = list(countryCode='US'
# ,centroid=' '
)
spocc_df=occ(query = species_search_list,from = "bison"
, limit = 1000
, has_coords=TRUE
, date = c(as.Date(startdate),as.Date(enddate))
, bisonopts = bisonopts
)
unique(spocc_df$bison$data$Bromus_tectorum$generalComments)
bison_final <- bison_df %>%
select(DataSet, decimalLatitude, decimalLongitude, ObsDate, ObsYear, source_sp_name, searched_term) %>%
unique()
bison_final
spocc_df=occ(query = species_search_list,from = c("bison","gbif")
, limit = 1000
, has_coords=TRUE
, date = c(as.Date(startdate),as.Date(enddate))
, bisonopts = bisonopts
)
unique(spocc_df$gbif$data$Bromus_tectorum$coordinateUncertaintyInMeters)
unique(spocc_df$gbif$data$Bromus_tectorum$coordinatePrecision)
gbif_df <- as.data.frame(occ2df(spocc_df$gbif)) %>%
filter(basisOfRecord %in% c("PRESERVED_SPECIMEN", "HUMAN_OBSERVATION", "OBSERVATION")) %>%
select(prov, name, longitude, latitude, eventDate, year, scientificName) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(eventDate),
ObsYear = year,
source_sp_name = word(scientificName,1,2," "),
searched_term = name
)
gbif_df <- as.data.frame(occ2df(spocc_df$gbif)) %>%
filter(basisOfRecord %in% c("PRESERVED_SPECIMEN", "HUMAN_OBSERVATION", "OBSERVATION")) %>%
filter(is.na(coordinatePrecision)) %>%
select(prov, name, longitude, latitude, eventDate, year, scientificName) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(eventDate),
ObsYear = year,
source_sp_name = word(scientificName,1,2," "),
searched_term = name
)
nrow(gbif_df)
gbif_df <- as.data.frame(occ2df(spocc_df$gbif)) %>%
filter(basisOfRecord %in% c("PRESERVED_SPECIMEN", "HUMAN_OBSERVATION", "OBSERVATION")) %>%
# filter(is.na(coordinatePrecision)) %>%
select(prov, name, longitude, latitude, eventDate, year, scientificName) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(eventDate),
ObsYear = year,
source_sp_name = word(scientificName,1,2," "),
searched_term = name
)
nrow(gbif_df)
gbif_df <- as.data.frame(occ2df(spocc_df$gbif)) %>%
filter(basisOfRecord %in% c("PRESERVED_SPECIMEN", "HUMAN_OBSERVATION", "OBSERVATION")) %>%
filter(is.na(coordinatePrecision) | coordinatePrecision < 10) %>%
select(prov, name, longitude, latitude, eventDate, year, scientificName) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(eventDate),
ObsYear = year,
source_sp_name = word(scientificName,1,2," "),
searched_term = name
)
nrow(gbif_df)
unique(spocc_df$gbif$data$Bromus_tectorum$coordinatePrecision)
unique(spocc_df$gbif$data$Bromus_tectorum$locationAccordingTo)
unique(spocc_df$gbif$data$Bromus_tectorum$verbatimCoordinateSystem)
unique(spocc_df$gbif$data$Bromus_tectorum$coordinateUncertaintyInMeters)
gbif_df <- as.data.frame(occ2df(spocc_df$gbif)) %>%
filter(basisOfRecord %in% c("PRESERVED_SPECIMEN", "HUMAN_OBSERVATION", "OBSERVATION")) %>%
filter(is.na(coordinateUncertaintyInMeters) | coordinateUncertaintyInMeters <= 30) %>%
select(prov, name, longitude, latitude, eventDate, year, scientificName) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(eventDate),
ObsYear = year,
source_sp_name = word(scientificName,1,2," "),
searched_term = name
)
gbif_df <- as.data.frame(occ2df(spocc_df$gbif)) %>%
filter(basisOfRecord %in% c("PRESERVED_SPECIMEN", "HUMAN_OBSERVATION", "OBSERVATION")) %>%
filter(is.na(coordinateUncertaintyInMeters) | coordinateUncertaintyInMeters <= 30) %>%
# select(prov, name, longitude, latitude, eventDate, year, scientificName) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(eventDate),
ObsYear = year,
source_sp_name = word(scientificName,1,2," "),
searched_term = name
)
gbif_df$coordinatePrecision
gbif_df$coordinateUncertaintyInMeters
################################################################################
#3. Pull data from API Sources
source('./API_Sources.R')
df_list <- list()
api_sources <- c('gbif','bison','eddmaps')
startdate <- '1980-01-01'
enddate <- as.Date(Sys.Date())
api_data(species_list = species_search_list
, sources = api_sources
, limit = 100
, bisonopts = bison_options
, startDate = startdate
, endDate = enddate
, US_only = T
)
# As needed, review these occ records to see if the number of records is reasonable.
df_list$spocc %>%
filter(DataSet=='gbif') %>%
select(searched_term) %>%
group_by(searched_term) %>%
summarize(count = n())
unique(spocc_df$gbif$data$Bromus_tectorum$issues)
bison_df
bison_df$basisOfRecord
unique(bison_df$basisOfRecord)
spocc_df=occ(query = species_search_list,from = c("bison","gbif")
, limit = 10000
, has_coords=TRUE
, date = c(as.Date(startdate),as.Date(enddate))
, bisonopts = bisonopts
)
unique(spocc_df$gbif$data$Bromus_tectorum$issues)
unique(spocc_df$bison$data$Bromus_tectorum$basisOfRecord)
if(sum(sapply(spocc_df$bison$data, NROW)) > 0){
bison_df <- as.data.frame(occ2df(spocc_df$bison)) %>%
filter(!is.na(date) & str_count(string = pointPath, pattern = 'centroid') != 1) %>%
filter(is.na(bison_df$centroid) & basisOfRecord %in% c('observation','specimen')) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(date),
ObsYear = as.integer(format(as.Date(date), "%Y")),
source_sp_name = providedScientificName,
searched_term = word(name,1,2," ")
)
bison_df <- as.data.frame(occ2df(spocc_df$bison)) %>%
filter(!is.na(date) & str_count(string = pointPath, pattern = 'centroid') != 1) %>%
filter(is.na(bison_df$centroid) & basisOfRecord %in% c('observation','specimen')) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(date),
ObsYear = as.integer(format(as.Date(date), "%Y")),
source_sp_name = providedScientificName,
searched_term = word(name,1,2," ")
)
nrow(bison_df)
bison_df <- as.data.frame(occ2df(spocc_df$bison)) %>%
filter(!is.na(date) & str_count(string = pointPath, pattern = 'centroid') != 1) %>%
# filter(is.na(bison_df$centroid) & basisOfRecord %in% c('observation','specimen')) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(date),
ObsYear = as.integer(format(as.Date(date), "%Y")),
source_sp_name = providedScientificName,
searched_term = word(name,1,2," ")
)
nrow(bison_df)
bison_df <- as.data.frame(occ2df(spocc_df$bison)) %>%
filter(!is.na(date) & str_count(string = pointPath, pattern = 'centroid') != 1) %>%
filter(is.na(bison_df$centroid) & basisOfRecord %in% c('observation','specimen')) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(date),
ObsYear = as.integer(format(as.Date(date), "%Y")),
source_sp_name = providedScientificName,
searched_term = word(name,1,2," ")
)
nrow(bison_df)
spocc_df=occ(query = 'Populus tremuloides',from = c("bison","gbif")
, limit = 10000
, has_coords=TRUE
, date = c(as.Date(startdate),as.Date(enddate))
, bisonopts = bisonopts
)
bison_df <- as.data.frame(occ2df(spocc_df$bison)) %>%
filter(!is.na(date) & str_count(string = pointPath, pattern = 'centroid') != 1) %>%
filter(is.na(bison_df$centroid) & basisOfRecord %in% c('observation','specimen')) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(date),
ObsYear = as.integer(format(as.Date(date), "%Y")),
source_sp_name = providedScientificName,
searched_term = word(name,1,2," ")
)
bison_df <- as.data.frame(occ2df(spocc_df$bison)) %>%
filter(!is.na(date) & str_count(string = pointPath, pattern = 'centroid') != 1) %>%
filter(is.na(bison_df$centroid) & basisOfRecord %in% c('observation','specimen')) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(date),
ObsYear = as.integer(format(as.Date(date), "%Y")),
source_sp_name = providedScientificName,
searched_term = word(name,1,2," ")
)
nrow(bison_df)
bison_df <- as.data.frame(occ2df(spocc_df$bison)) %>%
filter(!is.na(date) & str_count(string = pointPath, pattern = 'centroid') != 1) %>%
filter(is.na(bison_df$centroid) & basisOfRecord %in% c('observation','specimen')) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(date),
ObsYear = as.integer(format(as.Date(date), "%Y")),
source_sp_name = providedScientificName,
searched_term = word(name,1,2," ")
)
bison_df <- as.data.frame(occ2df(spocc_df$bison)) %>%
filter(!is.na(date) & str_count(string = pointPath, pattern = 'centroid') != 1) %>%
filter(basisOfRecord %in% c('observation','specimen')) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(date),
ObsYear = as.integer(format(as.Date(date), "%Y")),
source_sp_name = providedScientificName,
searched_term = word(name,1,2," ")
)
df_list <- list()
api_sources <- c('gbif','bison','eddmaps')
startdate <- '1980-01-01'
enddate <- as.Date(Sys.Date())
api_data(species_list = species_search_list
, sources = api_sources
, limit = 100
, bisonopts = bison_options
, startDate = startdate
, endDate = enddate
, US_only = T
)
# As needed, review these occ records to see if the number of records is reasonable.
df_list$spocc %>%
filter(DataSet=='bison') %>%
select(searched_term) %>%
group_by(searched_term) %>%
summarize(count = n())
spocc_df=occ(query = 'Bromus tectorum',from = c("bison","gbif")
, limit = 100
, has_coords=TRUE
, date = c(as.Date(startdate),as.Date(enddate))
, bisonopts = bisonopts
)
bison_df <- as.data.frame(occ2df(spocc_df$bison)) %>%
filter(!is.na(date) & str_count(string = pointPath, pattern = 'centroid') != 1) %>%
filter(basisOfRecord %in% c('observation','specimen')) %>%
filter(is.na(bison_df$centroid))
bison_df <- as.data.frame(occ2df(spocc_df$bison)) %>%
filter(!is.na(date) & str_count(string = pointPath, pattern = 'centroid') != 1) %>%
filter(basisOfRecord %in% c('observation','specimen')) %>%
filter(is.na(bison_df$centroid)) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(date),
ObsYear = as.integer(format(as.Date(date), "%Y")),
source_sp_name = providedScientificName,
searched_term = word(name,1,2," ")
)
bison_df <- as.data.frame(occ2df(spocc_df$bison)) %>%
filter(!is.na(date) & str_count(string = pointPath, pattern = 'centroid') != 1) %>%
filter(is.na(centroid) & basisOfRecord %in% c('observation','specimen')) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(date),
ObsYear = as.integer(format(as.Date(date), "%Y")),
source_sp_name = providedScientificName,
searched_term = word(name,1,2," ")
)
nrow(bison_df)
# Citation/Authorship Metadata ----------------------------------------------------------------
# Title: Species Occurrence Script
# Author: Peder Engelstad
# Affiliation: Colorado State University
# Contact: pengel@colostate.edu
# Origin Date: 3/7/2018
# Last Edited: 11/15/2018
# Purpose: Download and combine species occurrence data, perform QA/QC, and export to CSV
# Script Purpose: Pull occurrence records from API and hard-coded data sources
#
# Authors: Peder Engelstad, adapted from work by Helen Sofaer.
#          Also, a huge thank you to Scott Chamberlin at rOpenSci for developing packages
#          like 'spocc' and for being so responsive/helpful!
#
# Contact: pengel@colostate.edu
################################
list.of.packages <- c("devtools","gsheet","jsonlite","rgdal","rgeos","ritis","scrubr",'spocc',"stringr","taxize","tidyverse")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# !!! if you don't already have the latest version of spocc and/or taxize from github, uncomment the line below and run !!!
# remotes::install_github("ropensci/spocc")
# remotes::install_github("ropensci/taxize")
setwd('E:/Users/engelstad/GitHub/USGS_FORT/SpeciesOccurrenceData/')
# !!! make sure you have the latest version of the source scripts to run the following lines
# download.file(url="https://github.com/pederengelstad/USGS_FORT/archive/master.zip",destfile = 'OccScripts.zip', method = "curl")
# unzip('OccScripts.zip', overwrite = TRUE)
################################################################################
#2. Check for synonyms from ITIS and develop a finalized species list
library(tidyverse)
source('./SpeciesProcessing.R')
# Notes:
# 2.1 This function produces two objects: sp_df and species_search_list. The latter
#     is a vector of all accepted species names and their synonyms. This list extracts
#     the genus and species only--no subspecies, variants, or hybrids as they may not
#     be ecologically representative of the species queried.
#
# 2.2 The USDA parameter (TRUE/FALSE) will generate a list of official and
#     synonym USDA codes that can be passed to data sources that require them.
# sp_list = suppressWarnings(readLines('E:/Users/engelstad/USGS/OccurrenceData/PopulusSalix/splist.txt'))
sp_list = c('Bromus tectorum')
species_processing(sort(sp_list), USDA=T)
species_search_list
################################################################################
#3. Pull data from API Sources
source('./API_Sources.R')
df_list <- list()
api_sources <- c('gbif','bison','eddmaps')
startdate <- '1980-01-01'
enddate <- as.Date(Sys.Date())
api_data(species_list = species_search_list
, sources = api_sources
, limit = 100
, bisonopts = bison_options
, startDate = startdate
, endDate = enddate
, US_only = T
)
df_list <- list()
api_sources <- c('gbif','bison','eddmaps')
startdate <- '1980-01-01'
enddate <- as.Date(Sys.Date())
api_data(species_list = species_search_list
, sources = api_sources
, limit = 100
, startDate = startdate
, endDate = enddate
, US_only = T
)
# As needed, review these occ records to see if the number of records is reasonable.
df_list$spocc %>%
filter(DataSet=='bison') %>%
select(searched_term) %>%
group_by(searched_term) %>%
summarize(count = n())
bisonopts = list(countryCode='US'
# ,basisOfRecord='observation'
)
spocc_df=occ(query = 'Bromus tectorum',from = c("bison","gbif")
, limit = 100
, has_coords=TRUE
, date = c(as.Date(startdate),as.Date(enddate))
, bisonopts = bisonopts
)
bison_df <- as.data.frame(occ2df(spocc_df$bison)) %>%
filter(!is.na(date) & str_count(string = pointPath, pattern = 'centroid') != 1) %>%
filter(is.na(centroid) & basisOfRecord %in% c('observation','specimen')) %>%
mutate(DataSet = prov,
decimalLatitude = as.numeric(latitude),
decimalLongitude = as.numeric(longitude),
ObsDate = as.Date(date),
ObsYear = as.integer(format(as.Date(date), "%Y")),
source_sp_name = providedScientificName,
searched_term = word(name,1,2," ")
)
nrow(bison_df)
bison_final <- bison_df %>%
select(DataSet, decimalLatitude, decimalLongitude, ObsDate, ObsYear, source_sp_name, searched_term) %>%
unique()
nrow(bison_final)
# Citation/Authorship Metadata ----------------------------------------------------------------
# Title: Species Occurrence Script
# Author: Peder Engelstad
# Affiliation: Colorado State University
# Contact: pengel@colostate.edu
# Origin Date: 3/7/2018
# Last Edited: 11/15/2018
# Purpose: Download and combine species occurrence data, perform QA/QC, and export to CSV
# Script Purpose: Pull occurrence records from API and hard-coded data sources
#
# Authors: Peder Engelstad, adapted from work by Helen Sofaer.
#          Also, a huge thank you to Scott Chamberlin at rOpenSci for developing packages
#          like 'spocc' and for being so responsive/helpful!
#
# Contact: pengel@colostate.edu
################################
list.of.packages <- c("devtools","gsheet","jsonlite","rgdal","rgeos","ritis","scrubr",'spocc',"stringr","taxize","tidyverse")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# !!! if you don't already have the latest version of spocc and/or taxize from github, uncomment the line below and run !!!
# remotes::install_github("ropensci/spocc")
# remotes::install_github("ropensci/taxize")
setwd('E:/Users/engelstad/GitHub/USGS_FORT/SpeciesOccurrenceData/')
# !!! make sure you have the latest version of the source scripts to run the following lines
# download.file(url="https://github.com/pederengelstad/USGS_FORT/archive/master.zip",destfile = 'OccScripts.zip', method = "curl")
# unzip('OccScripts.zip', overwrite = TRUE)
################################################################################
#2. Check for synonyms from ITIS and develop a finalized species list
library(tidyverse)
source('./SpeciesProcessing.R')
sp_list = suppressWarnings(readLines('E:/Users/engelstad/USGS/OccurrenceData/PrioritySpecies/splistTenToForty.txt'))
species_processing(sort(sp_list), USDA=T)
species_search_list
sp_df
################################################################################
#3. Pull data from API Sources
source('./API_Sources.R')
df_list <- list()
api_sources <- c('gbif','bison','eddmaps')
startdate <- '1980-01-01'
enddate <- as.Date(Sys.Date())
api_data(species_list = species_search_list
, sources = api_sources
, limit = 100
, startDate = startdate
, endDate = enddate
, US_only = T
)
# As needed, review these occ records to see if the number of records is reasonable.
df_list$spocc %>%
filter(DataSet=='bison') %>%
select(searched_term) %>%
group_by(searched_term) %>%
summarize(count = n())
api_data(species_list = 'Bromus madritensis'
, sources = api_sources
, limit = 99999
, startDate = startdate
, endDate = enddate
, US_only = T
)
# As needed, review these occ records to see if the number of records is reasonable.
df_list$spocc %>%
filter(DataSet=='bison') %>%
select(searched_term) %>%
group_by(searched_term) %>%
summarize(count = n())
# As needed, review these occ records to see if the number of records is reasonable.
df_list$spocc %>%
filter(DataSet=='gbif') %>%
select(searched_term) %>%
group_by(searched_term) %>%
summarize(count = n())
source('./DataFromFiles.R')
aim_file = 'E:/Users/engelstad/USGS/data/BLM/AIM.allsp.pnts.May2018.csv'
lmf_file = 'E:/Users/engelstad/USGS/data/BLM/LMF.allsp.csv'
nisims_nps_file = 'E:/Users/engelstad/USGS/data/NISIMS/NISIMS_NPS_L48.csv'
nisims_blm_file = 'E:/Users/engelstad/USGS/data/NISIMS/NISIMS_BLM_L48.csv'
sp_df
# sp_list = suppressWarnings(readLines('E:/Users/engelstad/USGS/OccurrenceData/PrioritySpecies/splistTenToForty.txt'))
sp_list = c("Bromus madritensis")
species_processing(sort(sp_list), USDA=T)
species_search_list
sp_df
################################################################################
#3. Pull data from API Sources
source('./API_Sources.R')
df_list <- list()
api_sources <- c('gbif','bison','eddmaps')
startdate <- '1980-01-01'
enddate <- as.Date(Sys.Date())
api_data(species_list = 'Bromus madritensis'
, sources = api_sources
, limit = 99999
, startDate = startdate
, endDate = enddate
, US_only = T
)
# As needed, review these occ records to see if the number of records is reasonable.
df_list$spocc %>%
filter(DataSet=='gbif') %>%
select(searched_term) %>%
group_by(searched_term) %>%
summarize(count = n())
source('./DataFromFiles.R')
aim_file = 'E:/Users/engelstad/USGS/data/BLM/AIM.allsp.pnts.May2018.csv'
lmf_file = 'E:/Users/engelstad/USGS/data/BLM/LMF.allsp.csv'
nisims_nps_file = 'E:/Users/engelstad/USGS/data/NISIMS/NISIMS_NPS_L48.csv'
nisims_blm_file = 'E:/Users/engelstad/USGS/data/NISIMS/NISIMS_BLM_L48.csv'
AddDataFromFiles(aim_file_loc = aim_file,
lmf_file_loc = lmf_file,
nisims_nps_file_loc = nisims_nps_file,
nisims_blm_file_loc = nisims_blm_file)
########################################################################################################
#4. Perform QA/QC on occurrence records
source('./DataCleaning.R')
Data_QAQC(df_list)
occ_all %>%
select(DataSet) %>%
group_by(DataSet) %>%
summarize(count = n())
write.csv(occ_all, 'E:/Users/engelstad/USGS/data/scratch/testocc.csv')
species_search_list
sp_list = suppressWarnings(readLines('E:/Users/engelstad/USGS/OccurrenceData/PrioritySpecies/splistTenToForty.txt'))
species_processing(sort(sp_list), USDA=T)
